{"version":3,"sources":["../../src/fields/slugField.ts"],"sourcesContent":["import type { CheckboxField, Field, FieldHook, TextField } from 'payload'\n\nimport type { CreatePluginField, SlugFieldConfig } from '../types.js'\nimport type { PluginContext } from '../utils/createPluginContext.js'\n\nimport { getPluginPath } from '../utils/getPluginPath.js'\nimport { generateSlug, normalizeSlugOptions } from '../utils/slugify.js'\n\nexport const validateSlug =\n  (context: PluginContext): FieldHook =>\n  ({ data, req, siblingData, value }) => {\n    const { slugFieldConfig } = context.fieldConfigs\n\n    // If the slug is locked, return the existing value\n    if (!siblingData[slugFieldConfig.lockFieldName]) {\n      return value\n    }\n\n    const missingFields: string[] = []\n\n    // Collect values of the fields used for slug generation\n    const fields = slugFieldConfig.useFields.map((field) => {\n      const fieldValue = data?.[field] || null\n\n      if (!fieldValue) {\n        missingFields.push(field) // Track missing fields\n      }\n\n      return fieldValue\n    })\n\n    // If any required fields are missing, log and return the original value\n    if (missingFields.length > 0) {\n      req.payload.logger.warn('Missing fields for slug generation:', missingFields)\n      return value\n    }\n\n    // Generate the slug using slugify\n    const processedSlug = generateSlug(fields, context.slugifyOptions)\n\n    return processedSlug\n  }\n\nexport const createSlugField: CreatePluginField<SlugFieldConfig, Field[]> = ({\n  context,\n  fieldConfig,\n}): Field[] => {\n  const { useFields = ['title'] } = fieldConfig\n\n  const checkBoxField: CheckboxField = {\n    name: 'slugLock',\n    type: 'checkbox',\n    defaultValue: true,\n\n    admin: {\n      hidden: true,\n      position: 'sidebar',\n    },\n  }\n\n  const slugField: TextField = {\n    name: 'slug',\n    type: 'text',\n    admin: {\n      components: {\n        Field: {\n          clientProps: {\n            custom: {\n              checkboxFieldPath: checkBoxField.name,\n              slugifyOptions: normalizeSlugOptions(context.slugifyOptions),\n              watchFields: useFields,\n            },\n          },\n          path: getPluginPath('client', '#SlugFieldClient'),\n        },\n      },\n      position: 'sidebar',\n    },\n    hooks: {\n      beforeValidate: [validateSlug(context)],\n    },\n    index: true,\n    localized: true,\n    required: true,\n    unique: true,\n  }\n\n  return [slugField, checkBoxField]\n}\n"],"names":["getPluginPath","generateSlug","normalizeSlugOptions","validateSlug","context","data","req","siblingData","value","slugFieldConfig","fieldConfigs","lockFieldName","missingFields","fields","useFields","map","field","fieldValue","push","length","payload","logger","warn","processedSlug","slugifyOptions","createSlugField","fieldConfig","checkBoxField","name","type","defaultValue","admin","hidden","position","slugField","components","Field","clientProps","custom","checkboxFieldPath","watchFields","path","hooks","beforeValidate","index","localized","required","unique"],"mappings":"AAKA,SAASA,aAAa,QAAQ,4BAA2B;AACzD,SAASC,YAAY,EAAEC,oBAAoB,QAAQ,sBAAqB;AAExE,OAAO,MAAMC,eACX,CAACC,UACD,CAAC,EAAEC,IAAI,EAAEC,GAAG,EAAEC,WAAW,EAAEC,KAAK,EAAE;QAChC,MAAM,EAAEC,eAAe,EAAE,GAAGL,QAAQM,YAAY;QAEhD,mDAAmD;QACnD,IAAI,CAACH,WAAW,CAACE,gBAAgBE,aAAa,CAAC,EAAE;YAC/C,OAAOH;QACT;QAEA,MAAMI,gBAA0B,EAAE;QAElC,wDAAwD;QACxD,MAAMC,SAASJ,gBAAgBK,SAAS,CAACC,GAAG,CAAC,CAACC;YAC5C,MAAMC,aAAaZ,MAAM,CAACW,MAAM,IAAI;YAEpC,IAAI,CAACC,YAAY;gBACfL,cAAcM,IAAI,CAACF,OAAO,uBAAuB;;YACnD;YAEA,OAAOC;QACT;QAEA,wEAAwE;QACxE,IAAIL,cAAcO,MAAM,GAAG,GAAG;YAC5Bb,IAAIc,OAAO,CAACC,MAAM,CAACC,IAAI,CAAC,uCAAuCV;YAC/D,OAAOJ;QACT;QAEA,kCAAkC;QAClC,MAAMe,gBAAgBtB,aAAaY,QAAQT,QAAQoB,cAAc;QAEjE,OAAOD;IACT,EAAC;AAEH,OAAO,MAAME,kBAA+D,CAAC,EAC3ErB,OAAO,EACPsB,WAAW,EACZ;IACC,MAAM,EAAEZ,YAAY;QAAC;KAAQ,EAAE,GAAGY;IAElC,MAAMC,gBAA+B;QACnCC,MAAM;QACNC,MAAM;QACNC,cAAc;QAEdC,OAAO;YACLC,QAAQ;YACRC,UAAU;QACZ;IACF;IAEA,MAAMC,YAAuB;QAC3BN,MAAM;QACNC,MAAM;QACNE,OAAO;YACLI,YAAY;gBACVC,OAAO;oBACLC,aAAa;wBACXC,QAAQ;4BACNC,mBAAmBZ,cAAcC,IAAI;4BACrCJ,gBAAgBtB,qBAAqBE,QAAQoB,cAAc;4BAC3DgB,aAAa1B;wBACf;oBACF;oBACA2B,MAAMzC,cAAc,UAAU;gBAChC;YACF;YACAiC,UAAU;QACZ;QACAS,OAAO;YACLC,gBAAgB;gBAACxC,aAAaC;aAAS;QACzC;QACAwC,OAAO;QACPC,WAAW;QACXC,UAAU;QACVC,QAAQ;IACV;IAEA,OAAO;QAACb;QAAWP;KAAc;AACnC,EAAC"}