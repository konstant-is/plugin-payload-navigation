{"version":3,"sources":["../../src/utils/slugify.ts"],"sourcesContent":["/**\n * Hack to make 'slugify' import work with \"type\": \"module\".\n */\nimport s from 'slugify'\n\nimport type { SlugifyOptions } from '../types.js'\n\nimport { defaultValues } from '../constants.js'\n\n// Fallback for CommonJS or ESM default export\nexport const slugify = s.default || s\n\n// Type with flexible `remove` property\ntype SlugifyOptionsWithRemove = {\n  remove?: RegExp | string\n} & Omit<SlugifyOptions, 'remove'>\n\n/**\n * Convert a string representation of a RegExp (e.g., `/pattern/flags`) into a RegExp object.\n * @param regexString - The string representation of a RegExp.\n * @returns The RegExp object.\n */\nconst stringToRegex = (regexString: string): RegExp => {\n  const pattern = regexString.replace(/^\\/|\\/[gimsuy]*$/g, '') // Strip leading/trailing slashes and flags\n  const flags = regexString.match(/\\/([gimsuy]*)$/)?.[1] || '' // Extract flags (if any)\n  return new RegExp(pattern, flags)\n}\n\n/**\n * Merge user-provided slugify options with default values.\n * @param opts - The user-provided slugify options.\n * @returns The merged options.\n */\nconst getOptions = (opts: SlugifyOptionsWithRemove): Required<SlugifyOptions> => {\n  const remove = typeof opts.remove === 'string' ? stringToRegex(opts.remove) : opts.remove\n\n  return {\n    ...defaultValues.slugifyOptions,\n    ...opts,\n    remove: remove || defaultValues.slugifyOptions.remove,\n  }\n}\n\n/**\n * Generate a slug from an array of fields.\n * @param fields - The fields to generate the slug from.\n * @param slugifyOptions - Options for customizing slug generation.\n * @returns The generated slug.\n */\nexport const generateSlug = (\n  fields: Array<{ value?: unknown } | null | string | undefined>,\n  slugifyOptions: SlugifyOptionsWithRemove,\n): string => {\n  const options = getOptions(slugifyOptions)\n\n  return fields\n    .filter((item) => Boolean(item && (typeof item === 'string' || item?.value))) // Filter null/undefined\n    .map((item) => slugify(typeof item === 'string' ? item : String(item?.value), options))\n    .join(options.replacement) // Join the slugified parts\n}\n\n/**\n * Normalize slugify options by converting `remove` to a string representation.\n * @param options - The slugify options to normalize.\n * @returns The normalized options.\n */\nexport const normalizeSlugOptions = (options: SlugifyOptions): SlugifyOptionsWithRemove => {\n  const { remove, ...rest } = options\n  return { ...rest, remove: `${remove}` }\n}\n"],"names":["s","defaultValues","slugify","default","stringToRegex","regexString","pattern","replace","flags","match","RegExp","getOptions","opts","remove","slugifyOptions","generateSlug","fields","options","filter","item","Boolean","value","map","String","join","replacement","normalizeSlugOptions","rest"],"mappings":"AAAA;;CAEC,GACD,OAAOA,OAAO,UAAS;AAIvB,SAASC,aAAa,QAAQ,kBAAiB;AAE/C,8CAA8C;AAC9C,OAAO,MAAMC,UAAUF,EAAEG,OAAO,IAAIH,EAAC;AAOrC;;;;CAIC,GACD,MAAMI,gBAAgB,CAACC;IACrB,MAAMC,UAAUD,YAAYE,OAAO,CAAC,qBAAqB,IAAI,2CAA2C;;IACxG,MAAMC,QAAQH,YAAYI,KAAK,CAAC,mBAAmB,CAAC,EAAE,IAAI,GAAG,yBAAyB;;IACtF,OAAO,IAAIC,OAAOJ,SAASE;AAC7B;AAEA;;;;CAIC,GACD,MAAMG,aAAa,CAACC;IAClB,MAAMC,SAAS,OAAOD,KAAKC,MAAM,KAAK,WAAWT,cAAcQ,KAAKC,MAAM,IAAID,KAAKC,MAAM;IAEzF,OAAO;QACL,GAAGZ,cAAca,cAAc;QAC/B,GAAGF,IAAI;QACPC,QAAQA,UAAUZ,cAAca,cAAc,CAACD,MAAM;IACvD;AACF;AAEA;;;;;CAKC,GACD,OAAO,MAAME,eAAe,CAC1BC,QACAF;IAEA,MAAMG,UAAUN,WAAWG;IAE3B,OAAOE,OACJE,MAAM,CAAC,CAACC,OAASC,QAAQD,QAAS,CAAA,OAAOA,SAAS,YAAYA,MAAME,KAAI,IAAK,wBAAwB;KACrGC,GAAG,CAAC,CAACH,OAASjB,QAAQ,OAAOiB,SAAS,WAAWA,OAAOI,OAAOJ,MAAME,QAAQJ,UAC7EO,IAAI,CAACP,QAAQQ,WAAW,EAAE,2BAA2B;;AAC1D,EAAC;AAED;;;;CAIC,GACD,OAAO,MAAMC,uBAAuB,CAACT;IACnC,MAAM,EAAEJ,MAAM,EAAE,GAAGc,MAAM,GAAGV;IAC5B,OAAO;QAAE,GAAGU,IAAI;QAAEd,QAAQ,GAAGA,QAAQ;IAAC;AACxC,EAAC"}