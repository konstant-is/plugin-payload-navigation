{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import type { Config } from 'payload'\n\nimport { nestedDocsPlugin } from '@payloadcms/plugin-nested-docs'\n\nimport type { NavigationPluginConfig } from './types.js'\n\nimport { createPermalinkField } from './fields/permalinkField.js'\nimport { resolveLocalizedSlugs, resolveLocalizedUrl, resolveUrl } from './hooks/index.js'\nimport { enhanceFields } from './utils/enhanceFields.js'\nimport { getLocales } from './utils/getLocals.js'\nimport { mergeHooks } from './utils/mergeHooks.js'\n\nexport const navigationPlugin =\n  (pluginConfig: NavigationPluginConfig) =>\n  async (config: Config): Promise<Config> => {\n    if (pluginConfig.disabled) {\n      return config\n    }\n\n    const locales = getLocales(config)\n\n    let enhancedConfig = config\n\n    if (pluginConfig.nestedDocsPlugin) {\n      // Integrate nestedDocsPlugin and await its result\n      enhancedConfig = await nestedDocsPlugin({\n        collections: pluginConfig.collections,\n        ...pluginConfig.nestedDocsPlugin,\n      })(enhancedConfig)\n    }\n\n    return createPlugin({\n      config: enhancedConfig,\n      locales,\n      pluginConfig,\n    })\n  }\n\nconst createPlugin = ({\n  config,\n  locales,\n  pluginConfig,\n}: {\n  config: Config\n  locales: string[]\n  pluginConfig: NavigationPluginConfig\n}) => ({\n  ...config,\n  collections: (config.collections || []).map((collection) => {\n    if (!pluginConfig.collections.includes(collection.slug)) {\n      return collection // Skip collections not included in the plugin config\n    }\n\n    // Enhance fields and configurations\n    const { configs, fields } = enhanceFields({\n      config: pluginConfig,\n      fields: collection.fields,\n      locales,\n    })\n\n    // // Optionally add the permalink field\n    // const permalinkField =\n    //   pluginConfig.options?.usePermalink &&\n    //   createPermalinkField({\n    //     fieldName: 'permalink',\n    //     sourceField: configs.urlFieldConfig.fieldName,\n    //   })\n\n    return {\n      ...collection,\n      fields,\n      hooks: {\n        ...(collection.hooks || {}),\n        beforeChange: mergeHooks(\n          [\n            resolveUrl(pluginConfig, configs.urlFieldConfig),\n            resolveLocalizedUrl(configs.localizedUrlFieldConfig),\n            resolveLocalizedSlugs(configs.localizedSlugFieldConfig),\n          ],\n          collection.hooks?.beforeChange,\n        ),\n      },\n    }\n  }),\n})\n// export const navigation =\n//   (pluginOptions: NavigationPluginConfig) =>\n//   (config: Config): Config => {\n//     if (!config.collections) {\n//       config.collections = []\n//     }\n\n//     config.collections.push({\n//       slug: 'plugin-collection',\n//       fields: [\n//         {\n//           name: 'id',\n//           type: 'text',\n//         },\n//       ],\n//     })\n\n//     if (pluginOptions.collections) {\n//       for (const collectionSlug in pluginOptions.collections) {\n//         const collection = config.collections.find(\n//           (collection) => collection.slug === collectionSlug,\n//         )\n\n//         if (collection) {\n//           collection.fields.push({\n//             name: 'addedByPlugin',\n//             type: 'text',\n//             admin: {\n//               position: 'sidebar',\n//             },\n//           })\n//         }\n//       }\n//     }\n\n//     /**\n//      * If the plugin is disabled, we still want to keep added collections/fields so the database schema is consistent which is important for migrations.\n//      * If your plugin heavily modifies the database schema, you may want to remove this property.\n//      */\n//     if (pluginOptions.disabled) {\n//       return config\n//     }\n\n//     if (!config.endpoints) {\n//       config.endpoints = []\n//     }\n\n//     if (!config.admin) {\n//       config.admin = {}\n//     }\n\n//     if (!config.admin.components) {\n//       config.admin.components = {}\n//     }\n\n//     if (!config.admin.components.beforeDashboard) {\n//       config.admin.components.beforeDashboard = []\n//     }\n\n//     config.admin.components.beforeDashboard.push(`navigation/client#BeforeDashboardClient`)\n//     config.admin.components.beforeDashboard.push(`navigation/rsc#BeforeDashboardServer`)\n\n//     config.endpoints.push({\n//       handler: () => {\n//         return Response.json({ message: 'Hello from custom endpoint' })\n//       },\n//       method: 'get',\n//       path: '/my-plugin-endpoint',\n//     })\n\n//     const incomingOnInit = config.onInit\n\n//     config.onInit = async (payload) => {\n//       // Ensure we are executing any existing onInit functions before running our own.\n//       if (incomingOnInit) {\n//         await incomingOnInit(payload)\n//       }\n\n//       const { totalDocs } = await payload.count({\n//         collection: 'plugin-collection',\n//         where: {\n//           id: {\n//             equals: 'seeded-by-plugin',\n//           },\n//         },\n//       })\n\n//       if (totalDocs === 0) {\n//         await payload.create({\n//           collection: 'plugin-collection',\n//           data: {\n//             id: 'seeded-by-plugin',\n//           },\n//         })\n//       }\n//     }\n\n//     return config\n//   }\n"],"names":["nestedDocsPlugin","resolveLocalizedSlugs","resolveLocalizedUrl","resolveUrl","enhanceFields","getLocales","mergeHooks","navigationPlugin","pluginConfig","config","disabled","locales","enhancedConfig","collections","createPlugin","map","collection","includes","slug","configs","fields","hooks","beforeChange","urlFieldConfig","localizedUrlFieldConfig","localizedSlugFieldConfig"],"mappings":"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"}