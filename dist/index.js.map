{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import type { CollectionConfig, Config } from 'payload'\n\nimport { nestedDocsPlugin } from '@payloadcms/plugin-nested-docs'\n\nimport type { NavigationPluginConfig } from './types.js'\nimport type { PluginContext } from './utils/createPluginContext.js'\n\nimport { resolveLocalizedSlugs, resolveLocalizedUrl, resolveUrl } from './hooks/index.js'\nimport { createPluginContext } from './utils/createPluginContext.js'\nimport { enhanceFields } from './utils/enhanceFields.js'\nimport { getLocales } from './utils/getLocals.js'\nimport { mergeHooks } from './utils/mergeHooks.js'\n\nexport const navigationPlugin =\n  (navigationConfig: NavigationPluginConfig) =>\n  async (config: Config): Promise<Config> => {\n    if (navigationConfig.disabled) {\n      return config\n    }\n    const locales = getLocales(config)\n    let enhancedConfig = config\n\n    if (navigationConfig.nestedDocsPlugin) {\n      // Integrate nestedDocsPlugin and await its result\n      enhancedConfig = await nestedDocsPlugin({\n        collections: navigationConfig.collections,\n        ...navigationConfig.nestedDocsPlugin,\n      })(enhancedConfig)\n    }\n\n    const pluginConfig = createPluginContext(navigationConfig, locales)\n\n    return {\n      ...config,\n      collections: (enhancedConfig.collections || []).map((c) => createCollection(pluginConfig, c)),\n    }\n  }\n\nconst createCollection = (context: PluginContext, collection: CollectionConfig) => {\n  if (!context.collections.includes(collection.slug)) {\n    return collection // Skip collections not included in the plugin config\n  }\n\n  // Enhance fields\n  const fields = enhanceFields({\n    context,\n    fields: collection.fields,\n  })\n\n  return {\n    ...collection,\n    fields,\n    hooks: {\n      ...(collection.hooks || {}),\n      beforeChange: mergeHooks(\n        [resolveUrl(context), resolveLocalizedUrl(context), resolveLocalizedSlugs(context)],\n        collection.hooks?.beforeChange,\n      ),\n    },\n  }\n}\n"],"names":["nestedDocsPlugin","resolveLocalizedSlugs","resolveLocalizedUrl","resolveUrl","createPluginContext","enhanceFields","getLocales","mergeHooks","navigationPlugin","navigationConfig","config","disabled","locales","enhancedConfig","collections","pluginConfig","map","c","createCollection","context","collection","includes","slug","fields","hooks","beforeChange"],"mappings":"AAEA,SAASA,gBAAgB,QAAQ,iCAAgC;AAKjE,SAASC,qBAAqB,EAAEC,mBAAmB,EAAEC,UAAU,QAAQ,mBAAkB;AACzF,SAASC,mBAAmB,QAAQ,iCAAgC;AACpE,SAASC,aAAa,QAAQ,2BAA0B;AACxD,SAASC,UAAU,QAAQ,uBAAsB;AACjD,SAASC,UAAU,QAAQ,wBAAuB;AAElD,OAAO,MAAMC,mBACX,CAACC,mBACD,OAAOC;QACL,IAAID,iBAAiBE,QAAQ,EAAE;YAC7B,OAAOD;QACT;QACA,MAAME,UAAUN,WAAWI;QAC3B,IAAIG,iBAAiBH;QAErB,IAAID,iBAAiBT,gBAAgB,EAAE;YACrC,kDAAkD;YAClDa,iBAAiB,MAAMb,iBAAiB;gBACtCc,aAAaL,iBAAiBK,WAAW;gBACzC,GAAGL,iBAAiBT,gBAAgB;YACtC,GAAGa;QACL;QAEA,MAAME,eAAeX,oBAAoBK,kBAAkBG;QAE3D,OAAO;YACL,GAAGF,MAAM;YACTI,aAAa,AAACD,CAAAA,eAAeC,WAAW,IAAI,EAAE,AAAD,EAAGE,GAAG,CAAC,CAACC,IAAMC,iBAAiBH,cAAcE;QAC5F;IACF,EAAC;AAEH,MAAMC,mBAAmB,CAACC,SAAwBC;IAChD,IAAI,CAACD,QAAQL,WAAW,CAACO,QAAQ,CAACD,WAAWE,IAAI,GAAG;QAClD,OAAOF,WAAW,qDAAqD;;IACzE;IAEA,iBAAiB;IACjB,MAAMG,SAASlB,cAAc;QAC3Bc;QACAI,QAAQH,WAAWG,MAAM;IAC3B;IAEA,OAAO;QACL,GAAGH,UAAU;QACbG;QACAC,OAAO;YACL,GAAIJ,WAAWI,KAAK,IAAI,CAAC,CAAC;YAC1BC,cAAclB,WACZ;gBAACJ,WAAWgB;gBAAUjB,oBAAoBiB;gBAAUlB,sBAAsBkB;aAAS,EACnFC,WAAWI,KAAK,EAAEC;QAEtB;IACF;AACF"}