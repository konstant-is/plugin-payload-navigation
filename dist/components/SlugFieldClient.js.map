{"version":3,"sources":["../../src/components/SlugFieldClient.tsx"],"sourcesContent":["'use client'\n\nimport type { TextFieldClientProps } from 'payload'\n\nimport { Button, FieldLabel, TextInput, useField, useForm, useFormFields } from '@payloadcms/ui'\nimport React, { useCallback, useMemo } from 'react'\n\nimport type { SlugifyOptions } from '../types.js'\n\nimport { cx } from '../utils/cx.js'\nimport { generateSlug } from '../utils/slugify.js'\nimport css from './SlugField.module.css'\n\ntype Props = {\n  custom: {\n    checkboxFieldPath: string\n    slugifyOptions: { remove: string } & Omit<SlugifyOptions, 'remove'>\n    watchFields: string[]\n  }\n} & TextFieldClientProps\n\nexport const SlugFieldClient: React.FC<Props> = ({\n  custom,\n  field,\n  path,\n  readOnly: readOnlyFromProps,\n}) => {\n  const { label } = field\n  const { checkboxFieldPath: checkboxFieldPathFromProps, slugifyOptions, watchFields } = custom\n\n  const checkboxFieldPath = path?.includes('.')\n    ? `${path}.${checkboxFieldPathFromProps}`\n    : checkboxFieldPathFromProps\n\n  const { setValue, value } = useField<string>({ path: path || field.name })\n\n  const { dispatchFields } = useForm()\n\n  // The value of the checkbox\n  // We're using separate useFormFields to minimise re-renders\n  const checkboxValue = useFormFields(([fields]) => {\n    return fields[checkboxFieldPath]?.value as string\n  })\n\n  const fields = useFormFields(([fields]) => {\n    return watchFields.map((watch) => fields[watch])\n  })\n\n  const processedValue = useMemo(\n    () => generateSlug(fields, slugifyOptions),\n    [fields, slugifyOptions],\n  )\n\n  React.useEffect(() => {\n    if (processedValue !== value) {\n      setValue(processedValue)\n    }\n  }, [setValue, processedValue, value])\n\n  const handleLock = useCallback(\n    (e: React.MouseEvent) => {\n      e.preventDefault()\n\n      dispatchFields({\n        type: 'UPDATE',\n        path: checkboxFieldPath,\n        value: !checkboxValue,\n      })\n    },\n    [checkboxValue, checkboxFieldPath, dispatchFields],\n  )\n\n  const readOnly = readOnlyFromProps || checkboxValue\n\n  return (\n    <div className={cx('field-type', css.ctr)}>\n      <div className={cx(css.label_wrapper)}>\n        <FieldLabel\n          hideLocale={false}\n          htmlFor={`field-${path}`}\n          label={label}\n          localized={true}\n          required={field.required}\n        />\n\n        <Button buttonStyle=\"none\" className={cx(css.lock_button)} onClick={handleLock}>\n          {checkboxValue ? 'Unlock' : 'Lock'}\n        </Button>\n      </div>\n\n      <TextInput\n        onChange={setValue}\n        path={path || field.name}\n        readOnly={Boolean(readOnly)}\n        value={value}\n      />\n    </div>\n  )\n}\n"],"names":["Button","FieldLabel","TextInput","useField","useForm","useFormFields","React","useCallback","useMemo","cx","generateSlug","css","SlugFieldClient","custom","field","path","readOnly","readOnlyFromProps","label","checkboxFieldPath","checkboxFieldPathFromProps","slugifyOptions","watchFields","includes","setValue","value","name","dispatchFields","checkboxValue","fields","map","watch","processedValue","useEffect","handleLock","e","preventDefault","type","div","className","ctr","label_wrapper","hideLocale","htmlFor","localized","required","buttonStyle","lock_button","onClick","onChange","Boolean"],"mappings":"AAAA;;AAIA,SAASA,MAAM,EAAEC,UAAU,EAAEC,SAAS,EAAEC,QAAQ,EAAEC,OAAO,EAAEC,aAAa,QAAQ,iBAAgB;AAChG,OAAOC,SAASC,WAAW,EAAEC,OAAO,QAAQ,QAAO;AAInD,SAASC,EAAE,QAAQ,iBAAgB;AACnC,SAASC,YAAY,QAAQ,sBAAqB;AAClD,OAAOC,SAAS,yBAAwB;AAUxC,OAAO,MAAMC,kBAAmC,CAAC,EAC/CC,MAAM,EACNC,KAAK,EACLC,IAAI,EACJC,UAAUC,iBAAiB,EAC5B;IACC,MAAM,EAAEC,KAAK,EAAE,GAAGJ;IAClB,MAAM,EAAEK,mBAAmBC,0BAA0B,EAAEC,cAAc,EAAEC,WAAW,EAAE,GAAGT;IAEvF,MAAMM,oBAAoBJ,MAAMQ,SAAS,OACrC,GAAGR,KAAK,CAAC,EAAEK,4BAA4B,GACvCA;IAEJ,MAAM,EAAEI,QAAQ,EAAEC,KAAK,EAAE,GAAGtB,SAAiB;QAAEY,MAAMA,QAAQD,MAAMY,IAAI;IAAC;IAExE,MAAM,EAAEC,cAAc,EAAE,GAAGvB;IAE3B,4BAA4B;IAC5B,4DAA4D;IAC5D,MAAMwB,gBAAgBvB,cAAc,CAAC,CAACwB,OAAO;QAC3C,OAAOA,MAAM,CAACV,kBAAkB,EAAEM;IACpC;IAEA,MAAMI,SAASxB,cAAc,CAAC,CAACwB,OAAO;QACpC,OAAOP,YAAYQ,GAAG,CAAC,CAACC,QAAUF,MAAM,CAACE,MAAM;IACjD;IAEA,MAAMC,iBAAiBxB,QACrB,IAAME,aAAamB,QAAQR,iBAC3B;QAACQ;QAAQR;KAAe;IAG1Bf,MAAM2B,SAAS,CAAC;QACd,IAAID,mBAAmBP,OAAO;YAC5BD,SAASQ;QACX;IACF,GAAG;QAACR;QAAUQ;QAAgBP;KAAM;IAEpC,MAAMS,aAAa3B,YACjB,CAAC4B;QACCA,EAAEC,cAAc;QAEhBT,eAAe;YACbU,MAAM;YACNtB,MAAMI;YACNM,OAAO,CAACG;QACV;IACF,GACA;QAACA;QAAeT;QAAmBQ;KAAe;IAGpD,MAAMX,WAAWC,qBAAqBW;IAEtC,qBACE,MAACU;QAAIC,WAAW9B,GAAG,cAAcE,IAAI6B,GAAG;;0BACtC,MAACF;gBAAIC,WAAW9B,GAAGE,IAAI8B,aAAa;;kCAClC,KAACxC;wBACCyC,YAAY;wBACZC,SAAS,CAAC,MAAM,EAAE5B,MAAM;wBACxBG,OAAOA;wBACP0B,WAAW;wBACXC,UAAU/B,MAAM+B,QAAQ;;kCAG1B,KAAC7C;wBAAO8C,aAAY;wBAAOP,WAAW9B,GAAGE,IAAIoC,WAAW;wBAAGC,SAASd;kCACjEN,gBAAgB,WAAW;;;;0BAIhC,KAAC1B;gBACC+C,UAAUzB;gBACVT,MAAMA,QAAQD,MAAMY,IAAI;gBACxBV,UAAUkC,QAAQlC;gBAClBS,OAAOA;;;;AAIf,EAAC"}