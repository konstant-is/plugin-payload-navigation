{"version":3,"sources":["../../src/components/SlugFieldClient.tsx"],"sourcesContent":["'use client'\n\nimport type { TextFieldClientProps } from 'payload'\n\nimport { Button, FieldLabel, TextInput, useField, useForm, useFormFields } from '@payloadcms/ui'\nimport React, { useCallback, useMemo } from 'react'\n\nimport type { SlugifyOptions } from '../types.js'\n\nimport { cx } from '../utils/cx.js'\nimport { generateSlug } from '../utils/slugify.js'\nimport css from './SlugField.module.css'\n\ntype Props = {\n  custom: {\n    autoIncrementSlug: boolean\n    checkboxFieldPath: string\n    slugifyOptions: { remove: string } & Omit<SlugifyOptions, 'remove'>\n    watchFields: string[]\n  }\n} & TextFieldClientProps\n\nexport const SlugFieldClient: React.FC<Props> = ({\n  custom,\n  field,\n  path,\n  readOnly: readOnlyFromProps,\n}) => {\n  const { label } = field\n  const {\n    autoIncrementSlug,\n    checkboxFieldPath: checkboxFieldPathFromProps,\n    slugifyOptions,\n    watchFields,\n  } = custom\n\n  const checkboxFieldPath = path?.includes('.')\n    ? `${path}.${checkboxFieldPathFromProps}`\n    : checkboxFieldPathFromProps\n\n  const { setValue, value } = useField<string>({ path: path || field.name })\n\n  const { dispatchFields } = useForm()\n\n  // The value of the checkbox\n  // We're using separate useFormFields to minimise re-renders\n  const checkboxValue = useFormFields(([fields]) => {\n    return fields[checkboxFieldPath]?.value as string\n  })\n\n  const fields = useFormFields(([fields]) => {\n    return watchFields.map((watch) => fields[watch])\n  })\n\n  const processedValue = useMemo(() => {\n    const slug = generateSlug(fields, slugifyOptions)\n\n    if (value !== slug && autoIncrementSlug) {\n      return value\n    }\n\n    return slug\n  }, [fields, slugifyOptions, value, autoIncrementSlug])\n\n  React.useEffect(() => {\n    if (checkboxValue) {\n      if (processedValue !== value) {\n        setValue(processedValue)\n      }\n    }\n  }, [setValue, checkboxValue, processedValue, value])\n\n  const handleLock = useCallback(\n    (e: React.MouseEvent) => {\n      e.preventDefault()\n\n      dispatchFields({\n        type: 'UPDATE',\n        path: checkboxFieldPath,\n        value: !checkboxValue,\n      })\n    },\n    [checkboxValue, checkboxFieldPath, dispatchFields],\n  )\n\n  const readOnly = readOnlyFromProps || checkboxValue\n\n  return (\n    <div className={cx('field-type', css.ctr)}>\n      <div className={cx(css.label_wrapper)}>\n        <FieldLabel\n          hideLocale={false}\n          htmlFor={`field-${path}`}\n          label={label}\n          localized={true}\n          required={field.required}\n        />\n\n        <Button buttonStyle=\"none\" className={cx(css.lock_button)} onClick={handleLock}>\n          {checkboxValue ? 'Unlock' : 'Lock'}\n        </Button>\n      </div>\n\n      <TextInput\n        onChange={setValue}\n        path={path || field.name}\n        readOnly={Boolean(readOnly)}\n        value={value}\n      />\n    </div>\n  )\n}\n"],"names":["Button","FieldLabel","TextInput","useField","useForm","useFormFields","React","useCallback","useMemo","cx","generateSlug","css","SlugFieldClient","custom","field","path","readOnly","readOnlyFromProps","label","autoIncrementSlug","checkboxFieldPath","checkboxFieldPathFromProps","slugifyOptions","watchFields","includes","setValue","value","name","dispatchFields","checkboxValue","fields","map","watch","processedValue","slug","useEffect","handleLock","e","preventDefault","type","div","className","ctr","label_wrapper","hideLocale","htmlFor","localized","required","buttonStyle","lock_button","onClick","onChange","Boolean"],"mappings":"AAAA;;AAIA,SAASA,MAAM,EAAEC,UAAU,EAAEC,SAAS,EAAEC,QAAQ,EAAEC,OAAO,EAAEC,aAAa,QAAQ,iBAAgB;AAChG,OAAOC,SAASC,WAAW,EAAEC,OAAO,QAAQ,QAAO;AAInD,SAASC,EAAE,QAAQ,iBAAgB;AACnC,SAASC,YAAY,QAAQ,sBAAqB;AAClD,OAAOC,SAAS,yBAAwB;AAWxC,OAAO,MAAMC,kBAAmC,CAAC,EAC/CC,MAAM,EACNC,KAAK,EACLC,IAAI,EACJC,UAAUC,iBAAiB,EAC5B;IACC,MAAM,EAAEC,KAAK,EAAE,GAAGJ;IAClB,MAAM,EACJK,iBAAiB,EACjBC,mBAAmBC,0BAA0B,EAC7CC,cAAc,EACdC,WAAW,EACZ,GAAGV;IAEJ,MAAMO,oBAAoBL,MAAMS,SAAS,OACrC,GAAGT,KAAK,CAAC,EAAEM,4BAA4B,GACvCA;IAEJ,MAAM,EAAEI,QAAQ,EAAEC,KAAK,EAAE,GAAGvB,SAAiB;QAAEY,MAAMA,QAAQD,MAAMa,IAAI;IAAC;IAExE,MAAM,EAAEC,cAAc,EAAE,GAAGxB;IAE3B,4BAA4B;IAC5B,4DAA4D;IAC5D,MAAMyB,gBAAgBxB,cAAc,CAAC,CAACyB,OAAO;QAC3C,OAAOA,MAAM,CAACV,kBAAkB,EAAEM;IACpC;IAEA,MAAMI,SAASzB,cAAc,CAAC,CAACyB,OAAO;QACpC,OAAOP,YAAYQ,GAAG,CAAC,CAACC,QAAUF,MAAM,CAACE,MAAM;IACjD;IAEA,MAAMC,iBAAiBzB,QAAQ;QAC7B,MAAM0B,OAAOxB,aAAaoB,QAAQR;QAElC,IAAII,UAAUQ,QAAQf,mBAAmB;YACvC,OAAOO;QACT;QAEA,OAAOQ;IACT,GAAG;QAACJ;QAAQR;QAAgBI;QAAOP;KAAkB;IAErDb,MAAM6B,SAAS,CAAC;QACd,IAAIN,eAAe;YACjB,IAAII,mBAAmBP,OAAO;gBAC5BD,SAASQ;YACX;QACF;IACF,GAAG;QAACR;QAAUI;QAAeI;QAAgBP;KAAM;IAEnD,MAAMU,aAAa7B,YACjB,CAAC8B;QACCA,EAAEC,cAAc;QAEhBV,eAAe;YACbW,MAAM;YACNxB,MAAMK;YACNM,OAAO,CAACG;QACV;IACF,GACA;QAACA;QAAeT;QAAmBQ;KAAe;IAGpD,MAAMZ,WAAWC,qBAAqBY;IAEtC,qBACE,MAACW;QAAIC,WAAWhC,GAAG,cAAcE,IAAI+B,GAAG;;0BACtC,MAACF;gBAAIC,WAAWhC,GAAGE,IAAIgC,aAAa;;kCAClC,KAAC1C;wBACC2C,YAAY;wBACZC,SAAS,CAAC,MAAM,EAAE9B,MAAM;wBACxBG,OAAOA;wBACP4B,WAAW;wBACXC,UAAUjC,MAAMiC,QAAQ;;kCAG1B,KAAC/C;wBAAOgD,aAAY;wBAAOP,WAAWhC,GAAGE,IAAIsC,WAAW;wBAAGC,SAASd;kCACjEP,gBAAgB,WAAW;;;;0BAIhC,KAAC3B;gBACCiD,UAAU1B;gBACVV,MAAMA,QAAQD,MAAMa,IAAI;gBACxBX,UAAUoC,QAAQpC;gBAClBU,OAAOA;;;;AAIf,EAAC"}