{"version":3,"sources":["../../src/components/SlugFieldClient.tsx"],"sourcesContent":["'use client'\n\nimport type { TextFieldClientProps } from 'payload'\n\nimport { Button, FieldLabel, TextInput, useField, useForm, useFormFields } from '@payloadcms/ui'\nimport React, { useCallback, useMemo } from 'react'\n\nimport type { SlugifyOptions } from '../types.js'\n\nimport { cx } from '../utils/cx.js'\nimport { slugify } from '../utils/slugify.js'\nimport css from './SlugField.module.css'\n\ntype Props = {\n  custom: {\n    checkboxFieldPath: string\n    slugifyOptions: SlugifyOptions\n    watchFields: string[]\n  }\n} & TextFieldClientProps\n\nexport const SlugFieldClient: React.FC<Props> = ({\n  custom,\n  field,\n  path,\n  readOnly: readOnlyFromProps,\n}) => {\n  const { label } = field\n  const { checkboxFieldPath: checkboxFieldPathFromProps, slugifyOptions, watchFields } = custom\n\n  const checkboxFieldPath = path?.includes('.')\n    ? `${path}.${checkboxFieldPathFromProps}`\n    : checkboxFieldPathFromProps\n\n  const { setValue, value } = useField<string>({ path: path || field.name })\n\n  const { dispatchFields } = useForm()\n\n  // The value of the checkbox\n  // We're using separate useFormFields to minimise re-renders\n  const checkboxValue = useFormFields(([fields]) => {\n    return fields[checkboxFieldPath]?.value as string\n  })\n\n  const fields = useFormFields(([fields]) => {\n    return watchFields.map((watch) => fields[watch])\n  })\n\n  const processedValue = useMemo(() => {\n    const separator = slugifyOptions?.replacement ?? '-'\n\n    return fields\n      .filter((item) => Boolean(item?.value))\n      .reduce((accumulator, currentValue, currentIndex) => {\n        return (\n          String(accumulator) +\n          (currentIndex > 0 ? separator : '') +\n          slugify(String(currentValue?.value), slugifyOptions)\n        )\n      }, '')\n  }, [fields, slugifyOptions])\n\n  //   useEffect(() => {\n  //     if (checkboxValue) {\n  //       if (targetFieldValue) {\n  //         const formattedSlug = formatSlug(targetFieldValue);\n\n  //         if (value !== formattedSlug) setValue(formattedSlug);\n  //       } else {\n  //         if (value !== \"\") setValue(\"\");\n  //       }\n  //     }\n  //   }, [targetFieldValue, checkboxValue, setValue, value]);\n\n  React.useEffect(() => {\n    if (processedValue !== value) {\n      setValue(processedValue)\n    }\n  }, [setValue, processedValue, value])\n\n  const handleLock = useCallback(\n    (e: React.MouseEvent) => {\n      e.preventDefault()\n\n      dispatchFields({\n        type: 'UPDATE',\n        path: checkboxFieldPath,\n        value: !checkboxValue,\n      })\n    },\n    [checkboxValue, checkboxFieldPath, dispatchFields],\n  )\n\n  const readOnly = readOnlyFromProps || checkboxValue\n\n  return (\n    <div className={cx('field-type', css.ctr)}>\n      <div className={cx(css.label_wrapper)}>\n        <FieldLabel htmlFor={`field-${path}`} label={label} />\n\n        <Button buttonStyle=\"none\" className={cx(css.lock_button)} onClick={handleLock}>\n          {checkboxValue ? 'Unlock' : 'Lock'}\n        </Button>\n      </div>\n\n      <TextInput\n        onChange={setValue}\n        path={path || field.name}\n        readOnly={Boolean(readOnly)}\n        value={value}\n      />\n    </div>\n  )\n}\n"],"names":["Button","FieldLabel","TextInput","useField","useForm","useFormFields","React","useCallback","useMemo","cx","slugify","css","SlugFieldClient","custom","field","path","readOnly","readOnlyFromProps","label","checkboxFieldPath","checkboxFieldPathFromProps","slugifyOptions","watchFields","includes","setValue","value","name","dispatchFields","checkboxValue","fields","map","watch","processedValue","separator","replacement","filter","item","Boolean","reduce","accumulator","currentValue","currentIndex","String","useEffect","handleLock","e","preventDefault","type","div","className","ctr","label_wrapper","htmlFor","buttonStyle","lock_button","onClick","onChange"],"mappings":"AAAA;;AAIA,SAASA,MAAM,EAAEC,UAAU,EAAEC,SAAS,EAAEC,QAAQ,EAAEC,OAAO,EAAEC,aAAa,QAAQ,iBAAgB;AAChG,OAAOC,SAASC,WAAW,EAAEC,OAAO,QAAQ,QAAO;AAInD,SAASC,EAAE,QAAQ,iBAAgB;AACnC,SAASC,OAAO,QAAQ,sBAAqB;AAC7C,OAAOC,SAAS,yBAAwB;AAUxC,OAAO,MAAMC,kBAAmC,CAAC,EAC/CC,MAAM,EACNC,KAAK,EACLC,IAAI,EACJC,UAAUC,iBAAiB,EAC5B;IACC,MAAM,EAAEC,KAAK,EAAE,GAAGJ;IAClB,MAAM,EAAEK,mBAAmBC,0BAA0B,EAAEC,cAAc,EAAEC,WAAW,EAAE,GAAGT;IAEvF,MAAMM,oBAAoBJ,MAAMQ,SAAS,OACrC,GAAGR,KAAK,CAAC,EAAEK,4BAA4B,GACvCA;IAEJ,MAAM,EAAEI,QAAQ,EAAEC,KAAK,EAAE,GAAGtB,SAAiB;QAAEY,MAAMA,QAAQD,MAAMY,IAAI;IAAC;IAExE,MAAM,EAAEC,cAAc,EAAE,GAAGvB;IAE3B,4BAA4B;IAC5B,4DAA4D;IAC5D,MAAMwB,gBAAgBvB,cAAc,CAAC,CAACwB,OAAO;QAC3C,OAAOA,MAAM,CAACV,kBAAkB,EAAEM;IACpC;IAEA,MAAMI,SAASxB,cAAc,CAAC,CAACwB,OAAO;QACpC,OAAOP,YAAYQ,GAAG,CAAC,CAACC,QAAUF,MAAM,CAACE,MAAM;IACjD;IAEA,MAAMC,iBAAiBxB,QAAQ;QAC7B,MAAMyB,YAAYZ,gBAAgBa,eAAe;QAEjD,OAAOL,OACJM,MAAM,CAAC,CAACC,OAASC,QAAQD,MAAMX,QAC/Ba,MAAM,CAAC,CAACC,aAAaC,cAAcC;YAClC,OACEC,OAAOH,eACNE,CAAAA,eAAe,IAAIR,YAAY,EAAC,IACjCvB,QAAQgC,OAAOF,cAAcf,QAAQJ;QAEzC,GAAG;IACP,GAAG;QAACQ;QAAQR;KAAe;IAE3B,sBAAsB;IACtB,2BAA2B;IAC3B,gCAAgC;IAChC,8DAA8D;IAE9D,gEAAgE;IAChE,iBAAiB;IACjB,0CAA0C;IAC1C,UAAU;IACV,QAAQ;IACR,4DAA4D;IAE5Df,MAAMqC,SAAS,CAAC;QACd,IAAIX,mBAAmBP,OAAO;YAC5BD,SAASQ;QACX;IACF,GAAG;QAACR;QAAUQ;QAAgBP;KAAM;IAEpC,MAAMmB,aAAarC,YACjB,CAACsC;QACCA,EAAEC,cAAc;QAEhBnB,eAAe;YACboB,MAAM;YACNhC,MAAMI;YACNM,OAAO,CAACG;QACV;IACF,GACA;QAACA;QAAeT;QAAmBQ;KAAe;IAGpD,MAAMX,WAAWC,qBAAqBW;IAEtC,qBACE,MAACoB;QAAIC,WAAWxC,GAAG,cAAcE,IAAIuC,GAAG;;0BACtC,MAACF;gBAAIC,WAAWxC,GAAGE,IAAIwC,aAAa;;kCAClC,KAAClD;wBAAWmD,SAAS,CAAC,MAAM,EAAErC,MAAM;wBAAEG,OAAOA;;kCAE7C,KAAClB;wBAAOqD,aAAY;wBAAOJ,WAAWxC,GAAGE,IAAI2C,WAAW;wBAAGC,SAASX;kCACjEhB,gBAAgB,WAAW;;;;0BAIhC,KAAC1B;gBACCsD,UAAUhC;gBACVT,MAAMA,QAAQD,MAAMY,IAAI;gBACxBV,UAAUqB,QAAQrB;gBAClBS,OAAOA;;;;AAIf,EAAC"}